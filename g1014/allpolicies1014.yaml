---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-3
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-3
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-3
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-3
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-3
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-3
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-3
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-3
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-3
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-3
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-3
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-3
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-3
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-3
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-3
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-3
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-3
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-3
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-3
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-3
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-3
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-3
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-3
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-3
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-3
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-3
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-4
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-4
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-4
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-4
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-4
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-4
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-4
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-4
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-4
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-4
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-4
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-4
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-4
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-4
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-4
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-4
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-4
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-4
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-4
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-4
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-4
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-4
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-4
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-4
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-4
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-4
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-5
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-5
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-5
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-5
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-5
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-5
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-5
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-5
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-5
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-5
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-5
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-5
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-5
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-5
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-5
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-5
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-5
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-5
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-5
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-5
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-5
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-5
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-5
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-5
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-5
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-5
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-6
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-6
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-6
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-6
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-6
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-6
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-6
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-6
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-6
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-6
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-6
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-6
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-6
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-6
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-6
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-6
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-6
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-6
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-6
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-6
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-6
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-6
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-6
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-6
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-6
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-6
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-7
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-7
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-7
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-7
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-7
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-7
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-7
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-7
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-7
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-7
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-7
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-7
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-7
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-7
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-7
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-7
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-7
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-7
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-7
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-7
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-7
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-7
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-7
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-7
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-7
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-7
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-8
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-8
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-8
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-8
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-8
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-8
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-8
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-8
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-8
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-8
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-8
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-8
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-8
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-8
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-8
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-8
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-8
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-8
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-8
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-8
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-8
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-8
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-8
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-8
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-8
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-8
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-9
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-9
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-9
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-9
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-9
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-9
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-9
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-9
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-9
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-9
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-9
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-9
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-9
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-9
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-9
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-9
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-9
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-9
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-9
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-9
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-9
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-9
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-9
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-9
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-9
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-9
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-10
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-10
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-10
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-10
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-10
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-10
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-10
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-10
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-10
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-10
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-10
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-10
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-10
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-10
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-10
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-10
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-10
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-10
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-10
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-10
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-10
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-10
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-10
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-10
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-10
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-10
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-11
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-11
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-11
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-11
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-11
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-11
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-11
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-11
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-11
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-11
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-11
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-11
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-11
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-11
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-11
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-11
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-11
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-11
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-11
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-11
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-11
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-11
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-11
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-11
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-11
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-11
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-12
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-12
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-12
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-12
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-12
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-12
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-12
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-12
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-12
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-12
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-12
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-12
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-12
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-12
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-12
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-12
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-12
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-12
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-12
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-12
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-12
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-12
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-12
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-12
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-12
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-12
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-13
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-13
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-13
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-13
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-13
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-13
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-13
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-13
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-13
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-13
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-13
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-13
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-13
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-13
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-13
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-13
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-13
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-13
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-13
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-13
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-13
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-13
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-13
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-13
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-13
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-13
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-20
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-20
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-20
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-20
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-20
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-20
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-20
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-20
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-20
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-20
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-20
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-20
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-20
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-20
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-20
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-20
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-20
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-20
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-20
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-20
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-20
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-20
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-20
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-20
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-20
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-20
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-19
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-19
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-19
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-19
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-19
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-19
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-19
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-19
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-19
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-19
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-19
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-19
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-19
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-19
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-19
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-19
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-19
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-19
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-19
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-19
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-19
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-19
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-19
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-19
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-19
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-19
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-18
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-18
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-18
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-18
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-18
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-18
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-18
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-18
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-18
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-18
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-18
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-18
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-18
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-18
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-18
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-18
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-18
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-18
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-18
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-18
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-18
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-18
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-18
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-18
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-18
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-18
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-17
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-17
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-17
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-17
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-17
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-17
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-17
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-17
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-17
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-17
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-17
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-17
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-17
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-17
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-17
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-17
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-17
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-17
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-17
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-17
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-17
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-17
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-17
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-17
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-17
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-17
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-16
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-16
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-16
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-16
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-16
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-16
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-16
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-16
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-16
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-16
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-16
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-16
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-16
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-16
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-16
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-16
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-16
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-16
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-16
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-16
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-16
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-16
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-16
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-16
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-16
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-16
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-15
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-15
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-15
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-15
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-15
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-15
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-15
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-15
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-15
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-15
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-15
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-15
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-15
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-15
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-15
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-15
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-15
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-15
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-15
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-15
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-15
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-15
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-15
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-15
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-15
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-15
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-14
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-14
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-14
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-14
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-14
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-14
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-14
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-14
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-14
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-14
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-14
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-14
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-14
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-14
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-14
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-14
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-14
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-14
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-14
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-14
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-14
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-14
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-14
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-14
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-14
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-14
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-41
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-41
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-41
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-41
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-41
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-41
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-41
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-41
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-41
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-41
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-41
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-41
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-41
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-41
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-41
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-41
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-41
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-41
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-41
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-41
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-41
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-41
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-41
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-41
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-41
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-41
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-40
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-40
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-40
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-40
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-40
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-40
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-40
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-40
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-40
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-40
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-40
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-40
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-40
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-40
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-40
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-40
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-40
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-40
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-40
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-40
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-40
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-40
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-40
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-40
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-40
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-40
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-39
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-39
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-39
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-39
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-39
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-39
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-39
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-39
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-39
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-39
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-39
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-39
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-39
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-39
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-39
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-39
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-39
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-39
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-39
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-39
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-39
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-39
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-39
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-39
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-39
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-39
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-38
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-38
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-38
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-38
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-38
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-38
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-38
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-38
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-38
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-38
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-38
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-38
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-38
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-38
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-38
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-38
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-38
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-38
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-38
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-38
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-38
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-38
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-38
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-38
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-38
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-38
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-37
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-37
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-37
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-37
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-37
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-37
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-37
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-37
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-37
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-37
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-37
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-37
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-37
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-37
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-37
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-37
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-37
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-37
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-37
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-37
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-37
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-37
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-37
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-37
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-37
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-37
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-36
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-36
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-36
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-36
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-36
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-36
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-36
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-36
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-36
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-36
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-36
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-36
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-36
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-36
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-36
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-36
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-36
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-36
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-36
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-36
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-36
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-36
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-36
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-36
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-36
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-36
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-35
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-35
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-35
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-35
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-35
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-35
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-35
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-35
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-35
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-35
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-35
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-35
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-35
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-35
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-35
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-35
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-35
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-35
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-35
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-35
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-35
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-35
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-35
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-35
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-35
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-35
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-34
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-34
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-34
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-34
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-34
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-34
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-34
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-34
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-34
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-34
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-34
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-34
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-34
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-34
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-34
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-34
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-34
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-34
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-34
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-34
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-34
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-34
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-34
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-34
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-34
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-34
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-33
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-33
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-33
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-33
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-33
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-33
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-33
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-33
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-33
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-33
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-33
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-33
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-33
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-33
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-33
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-33
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-33
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-33
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-33
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-33
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-33
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-33
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-33
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-33
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-33
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-33
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-32
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-32
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-32
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-32
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-32
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-32
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-32
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-32
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-32
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-32
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-32
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-32
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-32
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-32
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-32
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-32
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-32
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-32
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-32
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-32
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-32
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-32
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-32
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-32
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-32
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-32
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-31
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-31
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-31
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-31
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-31
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-31
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-31
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-31
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-31
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-31
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-31
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-31
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-31
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-31
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-31
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-31
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-31
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-31
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-31
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-31
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-31
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-31
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-31
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-31
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-31
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-31
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-30
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-30
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-30
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-30
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-30
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-30
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-30
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-30
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-30
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-30
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-30
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-30
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-30
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-30
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-30
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-30
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-30
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-30
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-30
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-30
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-30
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-30
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-30
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-30
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-30
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-30
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-29
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-29
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-29
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-29
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-29
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-29
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-29
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-29
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-29
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-29
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-29
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-29
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-29
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-29
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-29
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-29
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-29
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-29
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-29
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-29
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-29
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-29
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-29
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-29
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-29
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-29
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-28
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-28
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-28
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-28
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-28
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-28
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-28
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-28
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-28
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-28
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-28
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-28
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-28
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-28
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-28
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-28
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-28
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-28
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-28
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-28
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-28
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-28
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-28
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-28
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-28
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-28
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-27
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-27
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-27
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-27
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-27
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-27
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-27
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-27
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-27
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-27
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-27
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-27
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-27
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-27
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-27
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-27
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-27
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-27
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-27
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-27
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-27
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-27
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-27
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-27
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-27
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-27
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-26
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-26
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-26
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-26
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-26
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-26
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-26
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-26
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-26
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-26
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-26
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-26
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-26
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-26
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-26
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-26
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-26
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-26
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-26
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-26
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-26
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-26
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-26
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-26
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-26
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-26
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-25
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-25
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-25
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-25
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-25
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-25
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-25
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-25
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-25
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-25
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-25
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-25
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-25
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-25
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-25
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-25
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-25
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-25
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-25
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-25
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-25
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-25
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-25
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-25
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-25
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-25
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-24
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-24
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-24
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-24
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-24
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-24
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-24
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-24
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-24
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-24
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-24
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-24
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-24
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-24
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-24
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-24
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-24
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-24
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-24
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-24
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-24
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-24
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-24
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-24
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-24
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-24
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-23
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-23
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-23
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-23
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-23
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-23
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-23
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-23
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-23
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-23
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-23
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-23
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-23
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-23
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-23
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-23
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-23
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-23
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-23
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-23
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-23
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-23
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-23
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-23
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-23
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-23
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-22
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-22
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-22
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-22
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-22
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-22
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-22
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-22
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-22
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-22
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-22
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-22
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-22
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-22
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-22
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-22
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-22
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-22
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-22
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-22
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-22
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-22
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-22
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-22
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-22
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-22
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-21
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-21
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-21
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-21
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-21
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-21
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-21
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-21
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-21
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-21
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-21
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-21
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-21
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-21
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-21
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-21
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-21
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-21
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-21
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-21
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-21
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-21
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-21
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-21
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-21
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-21
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
