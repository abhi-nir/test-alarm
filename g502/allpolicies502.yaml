---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-61
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-61
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-61
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-61
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-61
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-61
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-61
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-61
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-61
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-61
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-61
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-61
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-61
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-61
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-61
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-61
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-61
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-61
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-61
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-61
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-61
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-61
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-61
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-61
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-61
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-61
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-60
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-60
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-60
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-60
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-60
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-60
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-60
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-60
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-60
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-60
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-60
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-60
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-60
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-60
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-60
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-60
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-60
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-60
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-60
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-60
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-60
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-60
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-60
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-60
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-60
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-60
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-59
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-59
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-59
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-59
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-59
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-59
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-59
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-59
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-59
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-59
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-59
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-59
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-59
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-59
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-59
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-59
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-59
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-59
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-59
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-59
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-59
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-59
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-59
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-59
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-59
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-59
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-58
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-58
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-58
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-58
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-58
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-58
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-58
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-58
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-58
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-58
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-58
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-58
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-58
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-58
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-58
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-58
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-58
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-58
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-58
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-58
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-58
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-58
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-58
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-58
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-58
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-58
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-57
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-57
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-57
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-57
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-57
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-57
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-57
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-57
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-57
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-57
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-57
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-57
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-57
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-57
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-57
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-57
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-57
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-57
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-57
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-57
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-57
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-57
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-57
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-57
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-57
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-57
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-56
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-56
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-56
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-56
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-56
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-56
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-56
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-56
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-56
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-56
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-56
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-56
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-56
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-56
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-56
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-56
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-56
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-56
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-56
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-56
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-56
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-56
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-56
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-56
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-56
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-56
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-55
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-55
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-55
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-55
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-55
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-55
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-55
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-55
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-55
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-55
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-55
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-55
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-55
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-55
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-55
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-55
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-55
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-55
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-55
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-55
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-55
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-55
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-55
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-55
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-55
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-55
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-54
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-54
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-54
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-54
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-54
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-54
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-54
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-54
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-54
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-54
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-54
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-54
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-54
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-54
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-54
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-54
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-54
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-54
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-54
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-54
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-54
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-54
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-54
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-54
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-54
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-54
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-53
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-53
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-53
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-53
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-53
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-53
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-53
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-53
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-53
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-53
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-53
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-53
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-53
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-53
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-53
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-53
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-53
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-53
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-53
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-53
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-53
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-53
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-53
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-53
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-53
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-53
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-52
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-52
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-52
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-52
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-52
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-52
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-52
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-52
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-52
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-52
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-52
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-52
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-52
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-52
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-52
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-52
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-52
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-52
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-52
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-52
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-52
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-52
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-52
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-52
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-52
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-52
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-51
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-51
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-51
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-51
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-51
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-51
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-51
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-51
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-51
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-51
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-51
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-51
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-51
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-51
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-51
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-51
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-51
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-51
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-51
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-51
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-51
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-51
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-51
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-51
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-51
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-51
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-50
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-50
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-50
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-50
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-50
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-50
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-50
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-50
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-50
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-50
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-50
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-50
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-50
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-50
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-50
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-50
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-50
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-50
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-50
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-50
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-50
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-50
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-50
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-50
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-50
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-50
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-49
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-49
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-49
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-49
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-49
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-49
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-49
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-49
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-49
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-49
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-49
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-49
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-49
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-49
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-49
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-49
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-49
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-49
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-49
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-49
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-49
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-49
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-49
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-49
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-49
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-49
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-48
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-48
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-48
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-48
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-48
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-48
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-48
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-48
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-48
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-48
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-48
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-48
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-48
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-48
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-48
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-48
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-48
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-48
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-48
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-48
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-48
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-48
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-48
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-48
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-48
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-48
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-47
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-47
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-47
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-47
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-47
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-47
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-47
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-47
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-47
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-47
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-47
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-47
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-47
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-47
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-47
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-47
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-47
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-47
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-47
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-47
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-47
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-47
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-47
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-47
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-47
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-47
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-46
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-46
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-46
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-46
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-46
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-46
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-46
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-46
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-46
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-46
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-46
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-46
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-46
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-46
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-46
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-46
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-46
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-46
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-46
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-46
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-46
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-46
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-46
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-46
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-46
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-46
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-45
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-45
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-45
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-45
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-45
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-45
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-45
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-45
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-45
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-45
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-45
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-45
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-45
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-45
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-45
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-45
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-45
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-45
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-45
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-45
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-45
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-45
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-45
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-45
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-45
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-45
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-44
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-44
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-44
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-44
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-44
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-44
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-44
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-44
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-44
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-44
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-44
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-44
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-44
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-44
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-44
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-44
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-44
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-44
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-44
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-44
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-44
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-44
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-44
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-44
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-44
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-44
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-43
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-43
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-43
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-43
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-43
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-43
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-43
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-43
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-43
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-43
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-43
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-43
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-43
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-43
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-43
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-43
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-43
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-43
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-43
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-43
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-43
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-43
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-43
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-43
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-43
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-43
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-42
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-42
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-42
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-42
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-42
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-42
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-42
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-42
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-42
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-42
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-42
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-42
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-42
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-42
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-42
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-42
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-42
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-42
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-42
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-42
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-42
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-42
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-42
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-42
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-42
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-42
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
