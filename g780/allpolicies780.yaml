---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-91
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-91
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-91
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-91
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-91
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-91
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-91
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-91
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-91
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-91
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-91
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-91
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-91
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-91
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-91
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-91
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-91
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-91
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-91
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-91
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-91
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-91
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-91
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-91
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-91
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-91
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-90
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-90
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-90
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-90
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-90
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-90
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-90
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-90
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-90
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-90
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-90
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-90
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-90
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-90
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-90
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-90
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-90
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-90
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-90
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-90
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-90
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-90
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-90
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-90
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-90
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-90
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-89
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-89
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-89
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-89
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-89
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-89
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-89
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-89
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-89
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-89
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-89
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-89
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-89
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-89
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-89
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-89
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-89
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-89
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-89
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-89
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-89
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-89
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-89
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-89
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-89
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-89
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-88
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-88
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-88
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-88
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-88
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-88
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-88
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-88
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-88
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-88
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-88
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-88
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-88
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-88
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-88
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-88
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-88
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-88
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-88
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-88
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-88
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-88
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-88
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-88
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-88
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-88
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-87
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-87
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-87
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-87
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-87
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-87
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-87
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-87
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-87
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-87
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-87
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-87
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-87
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-87
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-87
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-87
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-87
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-87
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-87
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-87
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-87
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-87
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-87
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-87
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-87
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-87
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-86
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-86
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-86
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-86
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-86
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-86
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-86
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-86
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-86
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-86
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-86
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-86
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-86
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-86
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-86
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-86
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-86
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-86
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-86
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-86
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-86
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-86
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-86
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-86
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-86
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-86
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-85
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-85
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-85
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-85
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-85
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-85
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-85
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-85
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-85
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-85
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-85
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-85
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-85
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-85
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-85
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-85
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-85
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-85
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-85
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-85
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-85
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-85
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-85
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-85
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-85
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-85
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-84
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-84
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-84
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-84
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-84
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-84
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-84
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-84
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-84
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-84
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-84
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-84
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-84
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-84
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-84
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-84
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-84
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-84
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-84
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-84
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-84
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-84
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-84
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-84
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-84
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-84
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-83
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-83
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-83
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-83
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-83
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-83
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-83
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-83
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-83
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-83
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-83
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-83
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-83
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-83
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-83
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-83
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-83
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-83
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-83
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-83
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-83
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-83
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-83
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-83
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-83
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-83
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-82
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-82
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-82
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-82
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-82
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-82
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-82
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-82
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-82
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-82
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-82
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-82
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-82
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-82
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-82
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-82
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-82
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-82
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-82
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-82
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-82
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-82
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-82
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-82
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-82
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-82
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-81
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-81
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-81
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-81
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-81
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-81
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-81
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-81
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-81
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-81
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-81
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-81
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-81
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-81
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-81
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-81
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-81
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-81
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-81
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-81
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-81
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-81
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-81
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-81
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-81
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-81
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-80
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-80
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-80
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-80
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-80
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-80
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-80
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-80
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-80
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-80
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-80
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-80
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-80
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-80
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-80
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-80
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-80
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-80
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-80
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-80
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-80
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-80
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-80
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-80
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-80
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-80
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-79
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-79
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-79
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-79
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-79
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-79
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-79
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-79
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-79
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-79
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-79
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-79
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-79
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-79
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-79
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-79
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-79
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-79
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-79
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-79
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-79
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-79
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-79
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-79
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-79
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-79
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-78
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-78
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-78
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-78
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-78
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-78
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-78
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-78
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-78
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-78
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-78
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-78
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-78
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-78
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-78
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-78
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-78
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-78
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-78
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-78
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-78
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-78
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-78
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-78
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-78
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-78
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-77
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-77
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-77
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-77
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-77
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-77
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-77
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-77
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-77
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-77
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-77
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-77
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-77
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-77
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-77
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-77
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-77
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-77
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-77
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-77
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-77
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-77
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-77
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-77
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-77
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-77
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-76
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-76
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-76
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-76
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-76
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-76
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-76
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-76
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-76
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-76
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-76
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-76
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-76
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-76
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-76
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-76
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-76
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-76
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-76
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-76
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-76
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-76
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-76
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-76
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-76
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-76
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-75
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-75
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-75
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-75
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-75
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-75
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-75
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-75
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-75
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-75
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-75
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-75
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-75
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-75
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-75
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-75
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-75
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-75
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-75
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-75
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-75
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-75
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-75
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-75
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-75
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-75
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-74
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-74
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-74
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-74
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-74
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-74
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-74
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-74
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-74
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-74
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-74
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-74
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-74
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-74
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-74
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-74
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-74
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-74
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-74
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-74
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-74
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-74
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-74
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-74
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-74
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-74
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-73
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-73
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-73
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-73
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-73
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-73
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-73
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-73
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-73
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-73
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-73
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-73
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-73
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-73
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-73
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-73
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-73
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-73
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-73
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-73
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-73
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-73
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-73
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-73
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-73
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-73
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-72
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-72
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-72
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-72
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-72
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-72
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-72
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-72
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-72
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-72
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-72
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-72
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-72
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-72
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-72
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-72
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-72
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-72
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-72
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-72
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-72
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-72
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-72
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-72
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-72
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-72
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-71
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-71
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-71
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-71
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-71
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-71
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-71
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-71
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-71
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-71
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-71
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-71
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-71
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-71
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-71
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-71
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-71
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-71
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-71
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-71
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-71
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-71
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-71
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-71
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-71
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-71
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-70
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-70
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-70
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-70
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-70
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-70
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-70
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-70
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-70
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-70
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-70
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-70
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-70
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-70
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-70
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-70
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-70
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-70
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-70
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-70
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-70
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-70
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-70
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-70
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-70
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-70
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-69
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-69
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-69
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-69
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-69
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-69
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-69
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-69
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-69
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-69
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-69
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-69
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-69
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-69
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-69
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-69
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-69
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-69
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-69
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-69
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-69
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-69
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-69
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-69
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-69
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-69
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-68
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-68
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-68
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-68
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-68
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-68
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-68
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-68
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-68
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-68
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-68
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-68
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-68
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-68
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-68
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-68
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-68
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-68
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-68
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-68
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-68
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-68
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-68
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-68
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-68
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-68
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-67
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-67
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-67
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-67
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-67
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-67
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-67
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-67
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-67
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-67
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-67
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-67
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-67
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-67
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-67
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-67
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-67
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-67
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-67
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-67
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-67
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-67
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-67
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-67
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-67
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-67
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-66
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-66
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-66
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-66
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-66
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-66
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-66
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-66
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-66
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-66
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-66
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-66
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-66
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-66
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-66
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-66
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-66
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-66
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-66
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-66
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-66
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-66
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-66
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-66
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-66
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-66
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-65
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-65
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-65
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-65
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-65
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-65
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-65
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-65
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-65
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-65
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-65
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-65
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-65
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-65
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-65
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-65
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-65
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-65
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-65
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-65
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-65
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-65
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-65
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-65
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-65
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-65
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-64
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-64
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-64
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-64
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-64
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-64
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-64
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-64
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-64
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-64
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-64
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-64
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-64
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-64
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-64
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-64
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-64
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-64
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-64
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-64
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-64
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-64
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-64
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-64
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-64
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-64
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-63
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-63
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-63
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-63
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-63
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-63
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-63
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-63
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-63
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-63
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-63
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-63
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-63
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-63
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-63
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-63
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-63
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-63
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-63
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-63
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-63
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-63
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-63
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-63
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-63
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-63
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: 'By default Kubernetes allows communications
      across all pods within a cluster. Network  policies and, a CNI that enforces
      network policies (e.g. Calico, kube-router, etc.), must  be used to restrict
      communinications. A default NetworkPolicy should be configured for  each namespace
      to deny all ingress and egress traffic. Application teams can then configure  additional
      NetworkPolicy resources in their namespace to allow desired traffic. '
    policies.kyverno.io/title: Add default network policy
    test: abc
    x: "y"
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-network-policy-62
  resourceVersion: "116994"
  uid: 832306f7-60bd-4ec5-8809-147b5d4ee884
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
      kind: NetworkPolicy
      name: default-deny
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
        name: '*'
    mutate: {}
    name: default-deny
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    asssd: sdfsdf
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multitenancy
    policies.kyverno.io/description: Creates roles and role bindings for a new namespace.
    policies.kyverno.io/title: Configure namespace roles
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: add-ns-access-controls-62
  resourceVersion: "118103"
  uid: aa5d785d-4e16-4164-bb4a-e973f4c41d94
spec:
  background: false
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: add-sa-annotation
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        rules:
        - apiGroups:
          - ""
          resourceNames:
          - '{{request.object.metadata.name}}'
          resources:
          - namespaces
          verbs:
          - delete
      kind: ClusterRole
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: ClusterRoleBinding
      name: ns-owner-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-owner-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
      data:
        metadata:
          annotations:
            nirmata.io/ns-creator: '{{serviceAccountName}}'
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: '{{serviceAccountName}}'
          namespace: '{{serviceAccountNamespace}}'
      kind: RoleBinding
      name: ns-admin-{{request.object.metadata.name}}-{{request.userInfo.username}}-binding
      namespace: '{{request.object.metadata.name}}'
    match:
      resources:
        kinds:
        - Namespace
    mutate: {}
    name: generate-admin-role-binding
    preconditions:
    - key: '{{request.userInfo.username}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountName}}'
      operator: NotEquals
      value: ""
    - key: '{{serviceAccountNamespace}}'
      operator: NotEquals
      value: ""
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'The Kubernetes cluster autoscaler does not evict
      pods that use hostPath or emptyDir volumes.  To allow eviction of these pods,
      the annotation cluster-autoscaler.kubernetes.io/safe-to-evict=true  must be
      added to the pods. '
    policies.kyverno.io/title: Add safe-to-evict label
    test: sdfs
    x: wedfgdfgdfg
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: add-safe-to-evict-62
  resourceVersion: "119706"
  uid: 186aba61-5656-4c5c-84df-7e91c0b788a4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-empty-dir
    validate: {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: annotate-host-path
    validate: {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed.
    x: we
    xsdf: yxf
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  labels:
    xsdf: yxf
  name: deny-privilege-escalation-62
  resourceVersion: "120829"
  uid: 6209dbe2-3e07-4062-886f-36e8c7024336
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: deny-privilege-escalation-62
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
          containers:
          - =(securityContext):
              =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
              containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-deny-privilege-escalation
    validate:
      message: Privilege escalation is disallowed. The fields spec.containers[*].securityContext.allowPrivilegeEscalation,
        and spec.initContainers[*].securityContext.allowPrivilegeEscalation must be
        undefined or set to `false`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
                  containers:
                  - =(securityContext):
                      =(allowPrivilegeEscalation): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. Adding capabilities beyond the default set must not
      be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-add-capabilities-62
  resourceVersion: "118106"
  uid: d8464073-14ba-47d9-a79a-419b6d735fc8
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(capabilities): {}
          containers:
          - =(securityContext):
              =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(capabilities): {}
              containers:
              - =(securityContext):
                  =(capabilities): {}
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-capabilities
    validate:
      message: Adding of additional capabilities beyond the default set is not allowed.
        The fields spec.containers[*].securityContext.capabilities.add and  spec.initContainers[*].securityContext.capabilities.add
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(capabilities): {}
                  containers:
                  - =(securityContext):
                      =(capabilities): {}
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: disallow-host-namespaces-62
  resourceVersion: "118107"
  uid: 05d067ec-6748-445f-baa7-f2cd2dac9302
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(hostIPC): "false"
              =(hostNetwork): "false"
              =(hostPID): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed. The fields spec.hostNetwork,
        spec.hostIPC, and spec.hostPID must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(hostIPC): "false"
                  =(hostNetwork): "false"
                  =(hostPID): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: HostPath volumes let pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: disallow-host-path-62
  resourceVersion: "118108"
  uid: 7c14598a-bd11-4dee-a811-ac6466beaa1a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(hostPath): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-path
    validate:
      message: HostPath volumes are forbidden. The fields spec.volumes[*].hostPath
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(hostPath): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Access to host ports allows potential snooping
      of network traffic and should not be allowed, or at minimum restricted to a
      known list.
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: disallow-host-ports-62
  resourceVersion: "118109"
  uid: c9dcca2d-77b9-4b16-a264-3d39519d928d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(ports):
            - X(hostPort): 0
          containers:
          - =(ports):
            - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(ports):
                - X(hostPort): 0
              containers:
              - =(ports):
                - X(hostPort): 0
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-host-ports
    validate:
      message: Use of host ports is disallowed. The fields spec.containers[*].ports[*].hostPort
        and spec.initContainers[*].ports[*].hostPort must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(ports):
                    - X(hostPort): 0
                  containers:
                  - =(ports):
                    - X(hostPort): 0
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes.  A best practice is to use an immutable
      tag (e.g. v2.3) that maps to a specific version  of an application pod.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: disallow-latest-tag-62
  resourceVersion: "118110"
  uid: e62350e8-a3f7-4024-a9fa-2ba60c06664e
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*:*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '!*:latest'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-image-tag
    validate:
      message: Using the ':latest' tag is not recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '!*:latest'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: disallow-privileged-containers-62
  resourceVersion: "118111"
  uid: edd3254b-3b25-4240-9aa9-f23a0f540b23
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
              containers:
              - =(securityContext):
                  =(privileged): "false"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-priviledged-containers
    validate:
      message: Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged
        and spec.initContainers[*].securityContext.privileged must not be set to true.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(privileged): "false"
                  containers:
                  - =(securityContext):
                      =(privileged): "false"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed.
    policies.kyverno.io/title: Disallow SELinux
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: disallow-selinux-62
  resourceVersion: "118112"
  uid: e779d382-d1ea-4fe5-844f-cfa8f59383f5
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              X(seLinuxOptions): "null"
          =(securityContext):
            X(seLinuxOptions): "null"
          containers:
          - =(securityContext):
              X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  X(seLinuxOptions): "null"
              =(securityContext):
                X(seLinuxOptions): "null"
              containers:
              - =(securityContext):
                  X(seLinuxOptions): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seLinux
    validate:
      message: Setting custom SELinux options is disallowed. The fields spec.securityContext.seLinuxOptions,
        spec.containers[*].securityContext.seLinuxOptions, and spec.initContainers[*].securityContext.seLinuxOptions
        must be empty.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      X(seLinuxOptions): "null"
                  =(securityContext):
                    X(seLinuxOptions): "null"
                  containers:
                  - =(securityContext):
                      X(seLinuxOptions): "null"
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Capabilities permit privileged actions without
      giving full root access. All  capabilities should be dropped from a pod, with
      only those required added back.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: drop-all-capabilities-62
  resourceVersion: "118113"
  uid: 973914f5-039a-48af-9c85-ace4470adfbc
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          containers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          initContainers:
          - securityContext:
              capabilities:
                drop:
                - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          template:
            spec:
              initContainers:
              - securityContext:
                  capabilities:
                    drop:
                    - ALL
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-init-containers
    validate:
      message: All capabilities should be dropped with only those required added back.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  initContainers:
                  - securityContext:
                      capabilities:
                        drop:
                        - ALL
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-default-proc-mount-62
  resourceVersion: "118114"
  uid: 5591c632-4c24-4226-8d8f-f64f478c8d3a
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(procMount): Default
              containers:
              - =(securityContext):
                  =(procMount): Default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed. The fields
        spec.containers[*].securityContext.procMount and spec.initContainers[*].securityContext.procMount
        must not be changed  from `Default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(procMount): Default
                  containers:
                  - =(securityContext):
                      =(procMount): Default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Kubernetes recommends a set of standard labels
      for applications.  See https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: require-labels-62
  resourceVersion: "118115"
  uid: dafeba59-c381-4ad9-a912-32256945fb3d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/instance: ?*
            app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/instance: ?*
                app.kubernetes.io/name: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-for-labels
    validate:
      message: The labels `app.kubernetes.io/name` and `app.kubernetes.io/instance`
        are recommended.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/instance: ?*
                    app.kubernetes.io/name: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a pods lifecycle  during deployments, restarts, and upgrades.
      For each pod, a periodic `livenessProbe` is  performed by the kubelet to determine
      if the pod's containers are running or need to be  restarted. A `readinessProbe`
      is used by services and deployments to determine if the pod  is ready to receive
      network traffic.
    policies.kyverno.io/title: Require liveness and readiness probes
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-pod-probes-62
  resourceVersion: "118116"
  uid: 7576422d-d6ad-4d90-a819-99ebdef7c0da
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          containers:
          - livenessProbe:
              periodSeconds: '>0'
            readinessProbe:
              periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - livenessProbe:
                  periodSeconds: '>0'
                readinessProbe:
                  periodSeconds: '>0'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-livenessProbe-readinessProbe
    validate:
      message: Liveness and readiness probes are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - livenessProbe:
                      periodSeconds: '>0'
                    readinessProbe:
                      periodSeconds: '>0'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources  requested and consumed by each pod. It is
      recommended to require 'resources.requests'  and 'resources.limits' per pod.
      If a namespace level request or limit is specified,  defaults will automatically
      be applied to each pod based on the 'LimitRange'  configuration.
    policies.kyverno.io/title: Require pod requests and limits
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-pod-requests-limits-62
  resourceVersion: "118117"
  uid: b9c5e7ea-5698-4c43-9c3c-f83aad16f0d7
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          template:
            spec:
              containers:
              - resources:
                  limits:
                    memory: ?*
                  requests:
                    cpu: ?*
                    memory: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-resources
    validate:
      message: CPU and memory resource requests and limits are required
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - resources:
                      limits:
                        memory: ?*
                      requests:
                        cpu: ?*
                        memory: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A read-only root file system helps to enforce
      an immutable infrastructure strategy;  the container only needs to write on
      the mounted volume that persists the state.  An immutable root filesystem can
      also prevent malicious binaries from writing to the  host system.
    policies.kyverno.io/title: Require Read-Only Root FS
    x: we
  creationTimestamp: "2022-04-18T13:46:39Z"
  generation: 2
  name: require-ro-rootfs-62
  resourceVersion: "118118"
  uid: 6d685a9a-9b43-4ddd-9b69-44bc481b1d3c
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          template:
            spec:
              containers:
              - securityContext:
                  readOnlyRootFilesystem: true
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      readOnlyRootFilesystem: true
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users.
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: require-run-as-non-root-62
  resourceVersion: "118121"
  uid: 9aaee4b8-8ca9-410e-92f4-4aa9ced7a56d
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: check-containers
    validate:
      anyPattern:
      - spec:
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): true
          containers:
          - =(securityContext):
              =(runAsNonRoot): true
          securityContext:
            runAsNonRoot: true
      - spec:
          =(initContainers):
          - securityContext:
              runAsNonRoot: true
          containers:
          - securityContext:
              runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-check-containers
    validate:
      anyPattern:
      - spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(runAsNonRoot): true
              containers:
              - =(securityContext):
                  =(runAsNonRoot): true
              securityContext:
                runAsNonRoot: true
      - spec:
          template:
            spec:
              =(initContainers):
              - securityContext:
                  runAsNonRoot: true
              containers:
              - securityContext:
                  runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-check-containers
    validate:
      anyPattern:
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(runAsNonRoot): true
                  containers:
                  - =(securityContext):
                      =(runAsNonRoot): true
                  securityContext:
                    runAsNonRoot: true
      - spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - securityContext:
                      runAsNonRoot: true
                  containers:
                  - securityContext:
                      runAsNonRoot: true
      message: Running as root is not allowed. The fields spec.securityContext.runAsNonRoot,
        spec.containers[*].securityContext.runAsNonRoot, and spec.initContainers[*].securityContext.runAsNonRoot
        must be `true`.
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default.  The default policy should prevent overriding
      or disabling the policy, or restrict  overrides to an allowed set of profiles.
    policies.kyverno.io/title: Restrict AppArmor
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-apparmor-profiles-62
  resourceVersion: "118122"
  uid: 240232bc-b762-4609-ab4c-7eb4efd41273
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        metadata:
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          template:
            metadata:
              =(annotations):
                =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed. The annotation container.apparmor.security.beta.kubernetes.io
        must not be defined, or must not be set to anything other than `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  =(annotations):
                    =(container.apparmor.security.beta.kubernetes.io/*): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: 'Service externalIPs can be used for a MITM attack
      (CVE-2020-8554). Restrict externalIPs or limit to a known set of addresses.
      See: https://github.com/kyverno/kyverno/issues/1367.'
    policies.kyverno.io/title: Restrict External IPs
    x: we
  creationTimestamp: "2022-04-18T13:46:40Z"
  generation: 2
  name: restrict-external-ips-62
  resourceVersion: "118123"
  uid: e9099de4-08d2-4c43-832a-5969dc9c12bf
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-ips
    validate:
      message: externalIPs are not allowed.
      pattern:
        spec:
          X(externalIPs): nil
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Images from unknown registries may not be scanned
      and secured.  Requiring use of known registries helps reduce threat exposure.
    policies.kyverno.io/title: Restrict Image Registries
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-image-registries-62
  resourceVersion: "118124"
  uid: 4d823f0b-39a8-4af5-a441-d86264cc8212
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          containers:
          - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          template:
            spec:
              containers:
              - image: '*'
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-validate-registries
    validate:
      message: Unknown image registry.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - image: '*'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practice
    policies.kyverno.io/description: A Kubernetes service of type NodePort uses a
      host port to receive traffic from  any source. A 'NetworkPolicy' resource cannot
      be used to control traffic to host ports.  Although 'NodePort' services can
      be useful, their use must be limited to services  with additional upstream security
      checks.
    policies.kyverno.io/title: Disallow Node Ports
    x: we
  creationTimestamp: "2022-04-18T13:46:38Z"
  generation: 2
  name: restrict-node-port-62
  resourceVersion: "118125"
  uid: 1de36b66-2640-45dc-ae3b-8e20dc90fd97
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Service
    mutate: {}
    name: check-node-port
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          type: '!NodePort'
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The runtime default seccomp profile must be required,
      or only specific additional profiles should be allowed.
    policies.kyverno.io/title: Restrict Seccomp
    x: we
  creationTimestamp: "2022-04-18T13:46:43Z"
  generation: 2
  name: restrict-seccomp-62
  resourceVersion: "118126"
  uid: 4cb9419e-7fa0-464d-b2fe-7179bef25fa4
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
          =(securityContext):
            =(seccompProfile):
              =(type): runtime/default
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          template:
            spec:
              =(initContainers):
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
              =(securityContext):
                =(seccompProfile):
                  =(type): runtime/default
              containers:
              - =(securityContext):
                  =(seccompProfile):
                    =(type): runtime/default
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed. The fields spec.securityContext.seccompProfile.type,
        spec.containers[*].securityContext.seccompProfile.type, and spec.initContainers[*].securityContext.seccompProfile.type
        must be unset or set to `runtime/default`.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(initContainers):
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
                  =(securityContext):
                    =(seccompProfile):
                      =(type): runtime/default
                  containers:
                  - =(securityContext):
                      =(seccompProfile):
                        =(type): runtime/default
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Default)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node.
    x: we
  creationTimestamp: "2022-04-18T13:46:42Z"
  generation: 2
  name: restrict-sysctls-62
  resourceVersion: "118129"
  uid: 1de65cfd-bb6e-40d5-8a07-79f01161e75b
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                | net.ipv4.ping_group_range
              value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          template:
            spec:
              =(securityContext):
                =(sysctls):
                - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.tcp_syncookies
                    | net.ipv4.ping_group_range
                  value: ?*
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-sysctls
    validate:
      message: Setting additional sysctls above the allowed type is disallowed. The
        field spec.securityContext.sysctls must not use any other names than 'kernel.shm_rmid_forced',
        'net.ipv4.ip_local_port_range', 'net.ipv4.tcp_syncookies' and 'net.ipv4.ping_group_range'.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(securityContext):
                    =(sysctls):
                    - name: kernel.shm_rmid_forced | net.ipv4.ip_local_port_range
                        | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
                      value: ?*
  validationFailureAction: audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes.
    x: we
  creationTimestamp: "2022-04-18T13:46:41Z"
  generation: 2
  name: restrict-volume-types-62
  resourceVersion: "118130"
  uid: 37276a46-063f-495c-804e-a6146bbcbdc0
spec:
  background: true
  failurePolicy: Fail
  rules:
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          =(volumes):
          - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - Pod
    mutate: {}
    name: restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          =(volumes):
          - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gcePersistentDisk
    validate:
      message: Use of the gcePersistentDisk type volume is disallowed. The fields
        spec.volumes[*].gcePersistentDisk must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gcePersistentDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-awsElasticBlockStore
    validate:
      message: Use of the awsElasticBlockStore type volume is disallowed. The fields
        spec.volumes[*].awsElasticBlockStore must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(awsElasticBlockStore): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-gitRepo
    validate:
      message: Use of the gitRepo type volume is disallowed. The fields spec.volumes[*].gitRepo
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(gitRepo): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-nfs
    validate:
      message: Use of the nfs type volume is disallowed. The fields spec.volumes[*].nfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(nfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-iscsi
    validate:
      message: Use of the iscsi type volume is disallowed. The fields spec.volumes[*].iscsi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(iscsi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-glusterfs
    validate:
      message: Use of the glusterfs type volume is disallowed. The fields spec.volumes[*].glusterfs
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(glusterfs): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-rbd
    validate:
      message: Use of the rbd type volume is disallowed. The fields spec.volumes[*].rbd
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(rbd): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flexVolume
    validate:
      message: Use of the flexVolume type volume is disallowed. The fields spec.volumes[*].flexVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flexVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cinder
    validate:
      message: Use of the cinder type volume is disallowed. The fields spec.volumes[*].cinder
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cinder): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-cephFS
    validate:
      message: Use of the cephFS type volume is disallowed. The fields spec.volumes[*].cephFS
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(cephFS): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-flocker
    validate:
      message: Use of the flocker type volume is disallowed. The fields spec.volumes[*].flocker
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(flocker): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-fc
    validate:
      message: Use of the fc type volume is disallowed. The fields spec.volumes[*].fc
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(fc): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureFile
    validate:
      message: Use of the azureFile type volume is disallowed. The fields spec.volumes[*].azureFile
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureFile): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-vsphereVolume
    validate:
      message: Use of the vsphereVolume type volume is disallowed. The fields spec.volumes[*].vsphereVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(vsphereVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-quobyte
    validate:
      message: Use of the quobyte type volume is disallowed. The fields spec.volumes[*].quobyte
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(quobyte): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-azureDisk
    validate:
      message: Use of the azureDisk type volume is disallowed. The fields spec.volumes[*].azureDisk
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(azureDisk): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-portworxVolume
    validate:
      message: Use of the portworxVolume type volume is disallowed. The fields spec.volumes[*].portworxVolume
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(portworxVolume): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-scaleIO
    validate:
      message: Use of the scaleIO type volume is disallowed. The fields spec.volumes[*].scaleIO
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(scaleIO): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-storageos
    validate:
      message: Use of the storageos type volume is disallowed. The fields spec.volumes[*].storageos
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(storageos): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - DaemonSet
        - Deployment
        - Job
        - StatefulSet
    mutate: {}
    name: autogen-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          template:
            spec:
              =(volumes):
              - X(csi): "null"
  - exclude:
      resources: {}
    generate:
      clone: {}
    match:
      resources:
        kinds:
        - CronJob
    mutate: {}
    name: autogen-cronjob-restricted-vol-csi
    validate:
      message: Use of the csi type volume is disallowed. The fields spec.volumes[*].csi
        must not be set.
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                spec:
                  =(volumes):
                  - X(csi): "null"
  validationFailureAction: audit
---
